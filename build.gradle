/*
 * Copied from https://raw.githubusercontent.com/instedd/act/master/client/build.gradle
 */

apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'application'

repositories {
    mavenLocal()
    jcenter()
}

project(':rsync_java_client') {
    apply plugin: 'java'
    repositories {
        mavenCentral()
    }
    dependencies {
        compile 'commons-lang:commons-lang:2.3'
        compile 'commons-io:commons-io:2.4'
        compile 'commons-logging:commons-logging:1.2'
        compile 'org.mapdb:mapdb:1.0.6'
        testCompile "junit:junit:4.12"
    }
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.3.6'
    compile project(':rsync_java_client')
    compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.5.0-RC2'
    compile 'log4j:log4j:1.2.17'

    testCompile 'junit:junit:4.11'
}

def appName = "cdx"
mainClassName = "org.instedd.cdx.app.Main"
def version = "development-${"git rev-parse --verify --short HEAD".execute().text.trim()}"
println "Version ${version}"

task makeBuildDir {
    description 'Makes build directory ./build'
} << {
    buildDir.mkdirs()
}

String getViVersion(String version) {
    if(version.startsWith("development")) {
        return "0.0.0.0"
    }
    def components = (version =~ /\d+(?:\.\d+)+/)[0].split(/\./) as List
    components += (["0"] * (4-components.size()))
    return components.join('.')
}

task downloadWinrun4j {
  dependsOn makeBuildDir
} << {
    def filename = "winrun4J-0.4.4.zip"
    def url = "https://www.dropbox.com/s/i2msc0oi943o5hl/winrun4J-0.4.4.zip?dl=1"
    def zipFile = new File(buildDir, filename)
    def zipDest = new File(buildDir, "winrun4j")

    println "Downloading ${filename} from ${url} to ${zipDest}..."

    ant.get(src: url, dest: zipFile, skipexisting: true, verbose: true)
    delete zipDest
    ant.unzip(src: zipFile, dest: zipDest)
}

task downloadJre {
  dependsOn makeBuildDir
} << {
    def filename = "jre1.8.0_31.zip"
    def url = "https://dl.dropboxusercontent.com/u/41974231/jre1.8.0_31.zip"
    def zipFile = new File(buildDir, filename)
    def zipDest = new File(buildDir, "jre")

    println "Downloading ${filename} from ${url} to ${zipFile}..."

    ant.get(src: url, dest: zipFile, skipexisting: true, verbose: true)
    delete zipDest
    ant.unzip(src: zipFile, dest: zipDest)
    ext.jrePackage = zipDest
}

task downloadRsync {
  dependsOn makeBuildDir
  } << {
    def filename = "cwRsync.zip"
    def url = "https://www.dropbox.com/s/io2ply67jrx1niv/cwRsync.zip?dl=1"
    def zipFile = new File(buildDir, filename)
    def zipDest = new File(buildDir, "cwRsync")

    println "Downloading ${filename} from ${url} to ${zipDest}..."

    ant.get(src: url, dest: zipFile, skipexisting: true, verbose: true)
    delete zipDest
    ant.unzip(src: zipFile, dest: zipDest)
}

task winApp {
    dependsOn cleanInstallApp
    dependsOn installApp
    dependsOn downloadWinrun4j
    dependsOn downloadRsync
    dependsOn downloadJre
} << {
    def workDir = installApp.destinationDir

    copy {
        from "${downloadJre.jrePackage}/jre1.8.0_31"
        into "${workDir}/jre"
    }

    copy {
        from file("${buildDir}/winrun4j/winrun4j/bin/WinRun4J.exe")
        into "${workDir}/bin"
        rename "WinRun4J.exe", "cdx-client.exe"
    }

    copy {
        from file("dist/${appName}-client.ini")
        into "${workDir}/bin/"
    }

    copy {
      from file("dist/cdxsync.properties")
      into workDir
    }

    copy {
        from "${buildDir}/cwRsync/cwRsync/bin/"
        into workDir
    }
}

task prepareNsis {
    dependsOn cleanInstallApp
    dependsOn installApp
    dependsOn downloadWinrun4j
    dependsOn downloadRsync

    try {
        def proc = ['which', 'makensis'].execute()
        proc.waitFor()
        ext.makensisPath = proc.in.text.trim()
    } catch (e) {
        println "Error finding makensis: ${e.message}"
        ext.makensisPath = null
    }
} << {
    def workDir = installApp.destinationDir
    copy {
      from file("dist/cdxsync.properties")
      into workDir
    }
    copy {
        from file("dist/license.txt")
        into workDir
    }
    copy {
        from file("${buildDir}/winrun4j/winrun4j/bin/WinRun4J.exe")
        from file("${buildDir}/winrun4j/winrun4j/bin/RCEDIT.exe")

        into "${workDir}/bin"
    }
    copy {
        from file("dist/nsis/plugins/ExecDos.dll")
        into "${workDir}/nsis"
    }
    copy {
        from "${buildDir}/cwRsync/cwRsync/bin/"
        into "${workDir}/cwRsync"
    }
}

task installer {
    dependsOn prepareNsis
    dependsOn downloadJre
    description "Create an installer using NSIS"
} << {
    def platform = "win32" // TODO: support win64
    def workDir = installApp.destinationDir
    def distDir = new File(buildDir, "distributions")
    def nsiScriptName = "installer.nsi"
    def nsisOutput = "${appName}-${platform}-${version}.exe"
    def installerFile = nsisOutput

    if (prepareNsis.makensisPath.empty) {
        println "warning: makensis not found in your system"
        return
    }

    copy {
        from file("dist/${appName}-client.ini")
        into "${workDir}/bin/"
    }

    copy {
        from file("json/locations-packed.json")
        into workDir
    }

    println "Creating installer..."
    copy {
        from file(nsiScriptName)
        into workDir
    }
    delete file("${workDir}/jre1.8.0_31")
    copy {
        from downloadJre.jrePackage
        into workDir
    }

    def nsisParams = [prepareNsis.makensisPath, "-V2", "-DVERSION=${version}", "-DVIVERSION=${getViVersion(version)}", "-DPLATFORM=${platform}"]

    nsisParams.add(file("${workDir}/${nsiScriptName}"))
    println nsisParams
    def nsisProc = nsisParams.execute()
    nsisProc.waitFor()
    println nsisProc.text
    println "Check ${workDir}/${nsisOutput}"
    if (nsisProc.exitValue() != 0) {
        throw new RuntimeException("makensis failed")
    }

    copy {
        from file("${workDir}/${nsisOutput}")
        into distDir
        rename nsisOutput, installerFile
    }
    println "Created installer is in ${distDir}/${installerFile}"
}
